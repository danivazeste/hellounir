pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent { label 'principal' }
            steps {
                // Obtener cÃ³digo del repositorio
                git 'https://github.com/danivazeste/hellounir.git'
                bat 'whoami'
                bat 'hostname'
                echo WORKSPACE
		stash includes: '**/*',name:'repo'
            }
        }

        stage('Static') {
            agent { label 'principal' }
            steps {
		unstash 'repo'
		catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE'){
                bat '''
		    whoami
		    hostname
                    flake8 --exit-zero --format=pylint app >flake8.out
		    '''
		recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates : [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unhealthy: true]]}
            }
        }

	    stage('Security') {
            agent { label 'principal'}
            steps {
		unstash 'repo'
		catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                bat '''
		    whoami
		    hostname
                    bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                    '''
		        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],  qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true],  [threshold: 4, type: 'TOTAL', unhealthy: true]]}
            }
        }

        stage('Tests') {
            parallel {

                stage('Unit') {
                    agent { label 'agente1' }
                    steps {
                        //Test UNIT
                        unstash 'repo'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                whoami
                                hostname
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-unit.xml test\\unit
                            '''
                            stash includes: 'result-unit.xml', name:'stash-result-unit'
                        }
                    }
                }

                stage('Rest') {
                    agent { label 'agente2' }
                    steps {
                        //Test REST con lanzamiento de microservicios
                        unstash 'repo'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                whoami
                                hostname
                                set PYTHONPATH=%WORKSPACE%
                                set FLASK_APP=%WORKSPACE%\\app\\api.py
                                start flask run
                                start java -jar %WORKSPACE%\\wiremock-standalone-3.5.4.jar --port 9090 --root-dir %WORKSPACE%\\test\\wiremock
                                pytest --junitxml=%WORKSPACE%\\result-rest.xml %WORKSPACE%\\test\\rest
                            '''
                            stash includes: 'result-rest.xml', name:'stash-result-rest'
                        }
                    }
                }

                stage('Perfomance') {
		    agent { label 'agente2' }
                    steps {
		        // JMeter
			unstash 'repo'
                        bat '''
				whoami
				hostname
				'C:\\Users\\yog19\\Desktop\\CP1UNIR\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl'
			    '''
		        perfReport sourceDataFiles : 'flask.jtl'
                    }
                }

            }
        }

        stage('Cobertura (Coverage)') {
	       agent { label 'agente 2' }
	       steps {
	       	  unstash 'repo'
	       	  bat '''
		      	 whoami
		      	 hostname
		      	 coverage run --branch --source=app --omit=app\\__init.py__,app\\api.py -m pytest test\\unit
		      	 coverage report
		      	 coverage xml -o coverage.xml
		      '''
	      	  catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
		  cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90,85,80', lineCoverageTargets: '95,85,80', onlyStable: false
	       }
	   }
	}

    }
    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}
